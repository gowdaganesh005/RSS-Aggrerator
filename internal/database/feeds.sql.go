// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: feeds.sql

package database

import (
	"context"
	"time"
)

const createfeed = `-- name: Createfeed :one
INSERT INTO feeds (id , created_at, updated_at, name,url,user_id)
VALUES (?,?,?,?,?,?)
RETURNING id, created_at, updated_at, name, url, user_id, lastfetched_at
`

type CreatefeedParams struct {
	ID        string
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	UserID    string
}

func (q *Queries) Createfeed(ctx context.Context, arg CreatefeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createfeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastfetchedAt,
	)
	return i, err
}

const getFeed = `-- name: GetFeed :many
Select id, created_at, updated_at, name, url, user_id, lastfetched_at from feeds
`

func (q *Queries) GetFeed(ctx context.Context) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getFeed)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Url,
			&i.UserID,
			&i.LastfetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextFeedtoFetch = `-- name: GetNextFeedtoFetch :many
select id, created_at, updated_at, name, url, user_id, lastfetched_at from feeds
order by lastfetched_at Asc nulls first
limit ?
`

func (q *Queries) GetNextFeedtoFetch(ctx context.Context, limit int64) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getNextFeedtoFetch, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Url,
			&i.UserID,
			&i.LastfetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markAsFetched = `-- name: MarkAsFetched :one
update  feeds
set lastfetched_at=CURRENT_TIMESTAMP,
updated_at=CURRENT_TIMESTAMP
where id=? 
returning id, created_at, updated_at, name, url, user_id, lastfetched_at
`

func (q *Queries) MarkAsFetched(ctx context.Context, id string) (Feed, error) {
	row := q.db.QueryRowContext(ctx, markAsFetched, id)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastfetchedAt,
	)
	return i, err
}
