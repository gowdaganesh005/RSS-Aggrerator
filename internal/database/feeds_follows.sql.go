// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: feeds_follows.sql

package database

import (
	"context"
	"time"
)

const createfeedfollow = `-- name: Createfeedfollow :one
INSERT INTO feeds_follows (id , created_at, updated_at, user_id,feed_id)
VALUES (?,?,?,?,?)
RETURNING id, created_at, updated_at, user_id, feed_id
`

type CreatefeedfollowParams struct {
	ID        string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    string
	FeedID    string
}

func (q *Queries) Createfeedfollow(ctx context.Context, arg CreatefeedfollowParams) (FeedsFollow, error) {
	row := q.db.QueryRowContext(ctx, createfeedfollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i FeedsFollow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
	)
	return i, err
}

const deletefeedfollow = `-- name: Deletefeedfollow :exec
Delete FROM feeds_follows where id=? AND user_id =?
`

type DeletefeedfollowParams struct {
	ID     string
	UserID string
}

func (q *Queries) Deletefeedfollow(ctx context.Context, arg DeletefeedfollowParams) error {
	_, err := q.db.ExecContext(ctx, deletefeedfollow, arg.ID, arg.UserID)
	return err
}

const getfeedfollow = `-- name: Getfeedfollow :many
SELECT id, created_at, updated_at, user_id, feed_id from feeds_follows where user_id=?
`

func (q *Queries) Getfeedfollow(ctx context.Context, userID string) ([]FeedsFollow, error) {
	rows, err := q.db.QueryContext(ctx, getfeedfollow, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedsFollow
	for rows.Next() {
		var i FeedsFollow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
